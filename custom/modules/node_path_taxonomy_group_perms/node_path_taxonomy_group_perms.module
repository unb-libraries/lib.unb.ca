<?php

/**
 * @file
 * Contains node_path_taxonomy_group_perms.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;
use Drupal\node_path_taxonomy\Entity\NodeTaxonomyPath;
use Drupal\node_path_taxonomy\Entity\NodeTaxonomyPathRelationship;
use Drupal\node_path_taxonomy_group_perms\GroupPathPermissions;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_help().
 */
function node_path_taxonomy_group_perms_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the group_path_permissions module.
    case 'help.page.node_path_taxonomy_group_perms':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Simple Group Path Permissions') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function node_path_taxonomy_group_perms_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  $entity_type = $entity_type->id();

  switch ($entity_type) {

    case 'simple_group':

      $active_node_types = NodeTaxonomyPathRelationship::getConfiguredNodeTypes();
      $path_taxonomies = [];
      foreach ($active_node_types as $active_node_type) {
        $relationship_vid = NodeTaxonomyPathRelationship::loadByNodeType($active_node_type);
        $path_taxonomies[$relationship_vid] = $relationship_vid;
      }

      $fields['perm_content_paths'] = BaseFieldDefinition::create('entity_reference')
        ->setLabel(t('Content Creation Permissions'))
        ->setDescription(t('Choose the paths users within this group should be allowed to create/edit.'))
        ->setSettings(
          [
            'target_type' => 'taxonomy_term',
            'handler' => 'default:taxonomy_term',
            'handler_settings' => [
              'target_bundles' => $path_taxonomies,
            ],
          ]
        )
        ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
        ->setRequired(FALSE)
        ->setRevisionable(FALSE)
        ->setDisplayOptions(
          'view',
          [
            'label' => 'above',
            'weight' => 0,
          ]
        )
        ->setDisplayOptions(
          'form',
          [
            'type' => 'options_select',
            'weight' => 0,
          ]
        )
        ->setDisplayConfigurable('form', TRUE);

      if (empty($path_taxonomies)) {
        \Drupal::messenger()->addWarning(
          t('A path taxonomy has not been assigned for this node type.')
        );
        $fields['perm_content_paths']['#disabled'] = TRUE;
      }

      break;

  }

  return $fields;
}

/**
 * Implements hook_node_access().
 */
function node_path_taxonomy_group_perms_node_access(NodeInterface $node, $op, $account) {
  $type = $node->bundle();
  $access = AccessResult::neutral();

  // Only interfere with types that have active relationship taxonomies.
  $active_node_types = NodeTaxonomyPathRelationship::getConfiguredNodeTypes();
  if (in_array($type, $active_node_types)) {
    $access = GroupPathPermissions::userGroupNodePermissionAccessResult($account, $node, $op)
      ->cachePerUser()
      ->addCacheableDependency($node);
  }

  return $access;
}

/**
 * Implements hook_form_alter().
 */
function node_path_taxonomy_group_perms_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (NodeTaxonomyPathRelationship::getRelationshipSetFromFormState($form_state)) {
    $node = $form_state->getFormObject()->getEntity();
    $node_type = $node->bundle();
    if ($form_id == "node_{$node_type}_form" || $form_id == "node_{$node_type}_edit_form") {
      $uid = Drupal::currentUser()->id();
      if ($uid != 1) {
        $user = User::load($uid);
        $path_permission_terms = GroupPathPermissions::getUserPathPermissions($user, $node_type);
        if (!empty($path_permission_terms)) {
          $options = [];
          foreach ($path_permission_terms as $path_permission_term) {
            $options[$path_permission_term->id()] = NodeTaxonomyPath::getTermPathValue($path_permission_term);
          }
          $form['node_path']['publication_path']['#options'] = $options;
          $form['#validate'][] = [
            'Drupal\node_path_taxonomy_group_perms\GroupPathPermissions',
            'validateNodeForm',
          ];
        }
        else {
          // User has access to edit node in drupal permissions but no paths.
          $form['node_path']['publication_path']['#options'] = [];
          $form['#disabled'] = TRUE;
          \Drupal::messenger()->addError(
            t('Error : You do not have access to any publication paths.')
          );
        }
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function node_path_taxonomy_group_perms_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() != 'content') {
    return;
  }

  $user = Drupal::currentUser();
  if ($user->hasPermission('ignore node path taxonomy group permissions')) {
    return;
  }

  $controlled_types = NodeTaxonomyPathRelationship::getConfiguredNodeTypes();
  $user_perms = GroupPathPermissions::getCurrentUserEditPermissionsNids();

  // Make sure user gets no nodes if no permissions.
  if (empty($user_perms)) {
    $user_perms = [-1];
  }

  $group = $query->setWhereGroup($type = 'OR');
  $query->addWhere($group, 'type', $controlled_types, 'NOT IN');
  $query->addWhere($group, 'nid', $user_perms, 'IN');
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function node_path_taxonomy_group_perms_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  // Hide revisions tab for users without permission to edit.
  $applicable_routes = ['entity.node.canonical'];
  if (in_array($route_name, $applicable_routes)) {
    $user = \Drupal::currentUser();
    $node = \Drupal::routeMatch()->getParameter('node');
    $active_node_types = NodeTaxonomyPathRelationship::getConfiguredNodeTypes();
    if (in_array($node->bundle(), $active_node_types)) {
      if (!$node->access('update', $user)) {
        if (!empty($data['tabs'][0]['entity.node.version_history'])) {
          unset($data['tabs'][0]['entity.node.version_history']);
        }
      }
    }
  }
}
