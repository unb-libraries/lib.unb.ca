<?php

/**
 * @file
 * Contains public_profile.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_theme().
 */
function public_profile_theme($existing, $type, $theme, $path) {
  return [
    'profile__public' => [
      'template' => 'profile--public',
      'path' => \Drupal::service('extension.list.module')->getPath('public_profile') . '/templates',
      'base hook' => 'profile__public',
    ],
  ];
}

/**
 * Implements hook_preprocess_hook().
 */
function public_profile_preprocess_profile__public(&$variables) {
  $account = $variables['profile']->getOwner();
  $variables['account'] = $account;

  $storage = \Drupal::entityTypeManager()->getStorage('guide');
  $query = $storage->getQuery();
  $ids = $query
    ->condition('status', 1)
    ->condition('unlisted', 0)
    ->condition('editors.entity:paragraph.field_user.target_id', $account->id(), 'IN')
    ->condition('editors.entity:paragraph.field_display_editor', 1)
    ->sort('title', 'ASC')
    ->execute();
  $guides = $storage->loadMultiple($ids);

  $variables['guides'] = $guides;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function public_profile_profile_presave(EntityInterface $entity) {
  if ($entity->bundle() == 'public') {
    $user = $entity->getOwner();
    $name = implode('-', [$user->get('field_first_name')->getString(), $user->get('field_last_name')->getString()]);
    $fragment = preg_replace('/[^a-z]+/', '-', strtolower($name));

    $entity->set('field_url_fragment', $fragment);

    Cache::invalidateTags(['user:' . $user->id()]);
  }
}

/**
 * Implements hook_ENTITY_TYPE_create().
 */
function public_profile_user_create(EntityInterface $entity) {
  ensure_user_has_profile($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function public_profile_user_update(EntityInterface $entity) {
  ensure_user_has_profile($entity);
  $active = !$entity->isBlocked();

  // Using the public_profiles relationship only gives active profiles.
  $storage = \Drupal::entityTypeManager()->getStorage('profile');
  $query = $storage->getQuery();
  $ids = $query
    ->condition('type', 'public')
    ->condition('uid', $entity->id())
    ->execute();
  $profiles = $storage->loadMultiple($ids);

  foreach ($profiles as $profile) {
    if ($profile->isActive() != $active) {
      $profile->setActive($active);
      $profile->save();
    }
  }
}

/**
 * If the user has the public_profile role, then make sure a profile entity exists.
 */
function ensure_user_has_profile(EntityInterface $user) {
  if(!in_array('public_profile', $user->getRoles())) {
    return;
  }

  $storage = \Drupal::entityTypeManager()->getStorage('profile');
  $query = $storage->getQuery();
  $ids = $query
    ->condition('type', 'public')
    ->condition('uid', $user->id())
    ->execute();

  if(!empty($ids)) {
    return;
  }

  $profile = $storage->create([
    'type' => 'public',
    'uid' => $user->id(),
  ]);
  $profile->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function public_profile_form_profile_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $entity = $form_state->getFormObject()->getEntity();
  if ($entity->bundle() != 'public') {
    return;
  }

  $user = $entity->getOwner();

  if (empty($form_state->getUserInput())) {
    $warning = Markup::Create('Some data previously found here, eg. phone, email, position/title, is now synchronized with the Staff Directory and centrally maintained. See the <a href="'
      . Url::fromRoute('entity.user.edit_form', ['user' => $user->id()])->toString()
      . '">Directory Info</a> tab.');
    \Drupal::messenger()->addWarning($warning);
  }

  if (!($user->field_display_on_connect_page->getString())) {
    $form['group_specialized_help_tagging']['#access'] = FALSE;
  }

  if (!in_array('guide_editor', $user->getRoles())) {
    $toHide = [
      'field_guides_listing',
      'field_mini_biography',
      'field_show_library_link',
      'field_show_phone_number',
      'field_show_position_title',
      'field_show_pronouns',
      'field_show_social_media_icons',
      'field_show_subject_specialties',
      'field_show_website',
    ];

    foreach ($toHide as $field) {
      $form[$field]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function public_profile_entity_type_alter(array &$entity_types) {
  $class = '\Drupal\public_profile\Form\PublicProfileForm';
  $entity_types['profile']->setFormClass('edit', $class);
  $entity_types['profile']->setFormClass('add', $class);
}

/**
 * Implements hook_toolbar_alter().
 */
function public_profile_toolbar_alter(&$items) {
  $account = \Drupal::currentUser();
  if (in_array('public_profile', $account->getRoles())) {
    $items['user']['tray']['user_links']['#lazy_builder'] = [
      'public_profile.user_toolbar_link_builder:renderToolbarLinks',
      [],
    ];
  }
}
