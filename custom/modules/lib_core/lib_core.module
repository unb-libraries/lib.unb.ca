<?php

/**
 * @file
 * Contains lib_core.module.
 */
require 'vendor/autoload.php';

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use League\OAuth2\Client\OptionProvider\HttpBasicAuthOptionProvider;
use League\OAuth2\Client\Provider\GenericProvider;
use GuzzleHttp\Client;

/**
 * Implements hook_theme().
 */
function lib_core_theme($existing, $type, $theme, $path) {
  return [
    'help_info' => [
      'variables' => ['info' => NULL],
    ],
    'proxy_login' => [
      'variables' => ['url' => NULL],
    ],
  ];
}

/**
 * Implements hook_editor_js_settings_alter().
 *
 * @see https://www.drupal.org/project/colorbutton/issues/2910028
 */
function lib_core_editor_js_settings_alter(array &$settings) {
  $extra_editor_settings = [
    'colorButton_foreStyle' => [
      'element' => 'span',
      'attributes' => [
        'data-color' => '#(color)',
      ],
    ],
  ];

  if (array_key_exists('library_page_html', $settings['editor']['formats'])) {
    $settings['editor']['formats']['library_page_html']['editorSettings'] += $extra_editor_settings;
  }
}

/**
 * Implements hook_entity_presave().
 */
function lib_core_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'faculties':
      $name = $entity->getName();
      $selected_campus = $entity
        ->get('field_campus')
        ->getString();

      $campus_options = array_keys(
        $entity
          ->get('field_campus')
          ->getSetting('allowed_values')
      );
      // Strip any allowed, appended campus key from name field for display name.
      $display_name = trim(str_replace($campus_options, "", $name));
      $entity->set('field_display_name', $display_name);
      // Append current selected campus key to term name.
      $entity->setName($display_name . ' ' . $selected_campus);
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function lib_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'entity_browser_media_entity_browser_form':
      // Add entity browser library for improvements.
      $form['#attached']['library'][] = 'lib_core/table-row-check';
      break;

    case 'node_library_page_form':
    case 'node_library_page_edit_form':
      // Attach CSS libraries for Library page content type form enhancements.
      $form['#attached']['library'][] = 'lib_core/seven-overrides';

      // Remove 'Change to: Private revision' save option on *new* library page form.
      if ($form_id === 'node_library_page_form' &&
      isset($form['moderation_state']['widget'][0]['state']['#options']['work_in_progress'])) {
        unset ($form['moderation_state']['widget'][0]['state']['#options']['work_in_progress']);
      }
      break;

    case 'node_news_post_form':
    case 'node_news_post_edit_form':
      $form['#attached']['library'][] = 'lib_core/seven-overrides';

      $form['promote']['widget']['value']['#title'] = t('Set as rotating front page feature');
      break;

    case 'video_embed_dialog':
      // Disable ability to enable Autoplay setting.
      $form['settings']['autoplay']['#access'] = FALSE;
      break;

    case 'views_exposed_form':
      if (isset($form['type']['#options']['carousel'])) {
        if (\Drupal::currentUser()->id() != 1) {
          // Only show 'Carousel' exposed form filter for root user.
          unset($form['type']['#options']['carousel']);
          unset($form['type']['#options']['booking_space']);
        }
      };
      break;

    case 'webform_submission_purchase_suggestion_add_form':
    case 'webform_submission_material_retrieval_add_form':
      //$form['#attached']['library'][] = 'lib_core/lib-chosen';
      $form['#attached']['library'][] = 'lib_core/chosen-bootstrap';
      break;

    case 'webform_submission_contact_add_form':
      // Move Recipient | Default value from hidden form input (Webform 8.x-5.7+).
      if (!isset($form['elements']['recipient']['#default_value'])) {
        $username = "libweb";
      } else {
        $recipient = explode("@unb.ca", $form['elements']['recipient']['#default_value']);
        $username = strtok($recipient[0], "@");
      }

      // Set default value for subject if not prepopulated (Webform 8.x-5.7+).
      if (!isset($form['elements']['email_us']['subject']['#default_value'])) {
        $form['elements']['email_us']['subject']['#value'] = 'Patron Web Query';
      }

      if ($user = user_load_by_name($username)) {
        $alert_msg =
          '<div class="d-flex">' .
            '<div class="pr-1"><i class="fas fa-info-circle"></i></div>' .
            '<div class="align-self-start">Please complete the following webform to send email toÂ <b>' .
              $user->get('field_first_name')->getString() . ' ' .
              $user->get('field_last_name')->getString() . '</b>. ' .
              'You may also <a href="mailto:' . $username .
              '@unb.ca?subject=Patron Webform Query">use your own email program</a>, if configured.
            </div>' .
          '</div>';

        // Set recipient to user profile's Email address value.
        $user_email = user_load_by_name($username)
          ->get('mail')
          ->getString();
        $form['elements']['recipient']['#default_value'] = $user_email;
      }
      elseif ($department = _lib_core_contactable_department($username)) {
        $alert_msg =
          '<div class="d-flex">
            <div class="pr-1"><i class="fas fa-info-circle"></i></div>
            <div class="align-self-start">';

        // Custom alert for 'Web Feedback' form, aka Website Administrator (libweb).
        $alert_msg .=
          ($username == 'libweb')
          ? 'Please let us know if you experience any difficulties in accessing our pages or find content which you
             believe is inaccurate. General suggestions, questions, or comments about this website can be directed to
             our <a href="/services/your-comments-and-suggestions">Suggestion Form</a>.'
          : 'Please complete the following webform to send email to <b>' .
            $department . '</b>. You may also <a href="mailto:' . $username .
            '@unb.ca?subject=Patron Webform Query">use your own email program</a>, if configured.';
        $alert_msg .=
            '</div>
          </div>';

        // Set recipient to department email_id@unb.ca.
        $form['elements']['recipient']['#default_value'] = $username . "@unb.ca";
      }
      else {
        $alert_msg = FALSE;
      }

      if ($alert_msg) {
        $form['elements']['contact_message']['#message_message']['#markup'] = $alert_msg;

        // Change 'Email Us' fieldset label for 'Web Feedback' form.
        if ($username == 'libweb') {
          $form['elements']['email_us']['#title'] = 'Email our Website Administrator';
        }
      }
      else {
        // Somebody messed with form argument (or perhaps email id typo) - prevent submissions.
        $form['actions']['submit']['#attributes']['disabled'] = 'disabled';
        $form['elements']['contact_message']['#message_message']['#markup'] =
          '<div class="d-flex">
            <div class="pr-1"><i class="fas fa-exclamation-triangle"></i></div>
            <div class="align-self-start">Sorry, <b>' .
              $username . '</b> is not a valid UNB Libraries recipient. Messaging is <b>disabled</b>.
            </div>
           </div>';
      }
      break;

    case 'webform_submission_recalls_add_form':
      $form['#attached']['library'][] = 'lib_core/chosen-bootstrap';
      //dump($form['elements']['personal_information']['barcode']);
      //$form['elements']['personal_information']['barcode']['#description']['#suffix'] = '<span class="barcode-validation"></span>';
      $form['elements']['personal_information']['barcode']['#ajax'] = [
        'callback' => '_lib_core_validate_user',
        'disable-refocus' => TRUE,
        'event' => 'blur',
        'progress' => [
          'type' => 'throbber',
          'message' => t('Validating barcode'),
        ],
      ];
      break;

    default:
      break;
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * @see https://www.drupal.org/project/metatag/issues/2958193
 */
function lib_core_page_attachments_alter(array &$attachments) {
  // Trim all meta tags to a max length.
  if (!empty($attachments['#attached']['html_head'])) {
    // Adjust this as needed.
    $max_length = 200;
    foreach ($attachments['#attached']['html_head'] as &$tag) {
      // Only process meta tags with a 'content' attribute, that way it will
      // exclude LINK tags or meta tags which do not have a "content" value.
      if (isset($tag[0]['#tag']) && $tag[0]['#tag'] == 'meta') {
        if (isset($tag[0]['#attributes']['content'])) {
          if (!is_string($tag[0]['#attributes']['content'])) {
            $tag[0]['#attributes']['content'] = (string) $tag[0]['#attributes']['content'];
          }
          if (strlen($tag[0]['#attributes']['content']) > $max_length) {
            $tag[0]['#attributes']['content'] = mb_strimwidth($tag[0]['#attributes']['content'], 0, $max_length, "...");
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function lib_core_preprocess_node__news_post(&$variables) {
  $node = $variables['node'];

  $node_authoredon = $node->getCreatedTime();
  $formatted_date = \Drupal::service('date.formatter')->format($node_authoredon, 'metadata_date');
  $variables['formatted_date'] = $formatted_date;

  $fname = $node
    ->getOwner()
    ->get('field_first_name')
    ->getString();
  $lname = $node
    ->getOwner()
    ->get('field_last_name')
    ->getString();
  $author = $fname . ' ' . $lname;
  $variables['author'] = $lname ? $author : 'Admin';

  $stickied = $node->isSticky();
  $variables['stickied'] = $stickied;
}

/**
 * Implements hook_user_presave().
 */
function lib_core_user_presave($account) {
  // Auto-populate hidden Email ID field for use by Staff Directory View.
  $email = $account
    ->get('mail')
    ->getString();

  // Get lowercase version of email id.
  $email_id = strtolower(strtok($email, "@"));

  // Populate Email ID field.
  if (!empty($email) && $account->hasField('field_email_id')) {
    $account->set('field_email_id', $email_id);
  }
}

/**
 * Implements hook_views_query_alter().
 */
function lib_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() != 'content') {
    return;
  }

  $user = Drupal::currentUser();
  if (!$user->hasPermission('edit any library_page content')) {
    $query->addWhere(1, 'type', 'library_page', '!=');
  }
  if (!$user->hasPermission('edit any news_post content')) {
    $query->addWhere(1, 'type', 'news_post', '!=');
  }
}

/**
 * Port get_guide_categories() from core/inc-2015/guide_categories.php.
 *
 * @return array
 *   Associative array of Research Subjects where key = URL, value = label.
 */
function _lib_core_get_guide_categories() {
  $categories = [
    'anthropology' => 'Anthropology',
    'biology' => 'Biology',
    'business' => 'Business & Management',
    'chemistry' => 'Chemistry',
    'classics' => 'Classics and Ancient History',
    'computerscience' => 'Computer Science',
    'criminology' => 'Criminology',
    'development' => 'International Development Studies',
    'earth-sciences' => 'Earth Sciences',
    'economics' => 'Economics',
    'education' => 'Education',
    'engineering' => 'Engineering',
    'english' => 'English',
    'entrepreneurship' => 'Entrepreneurship',
    'familyviolence' => 'Family Violence Issues',
    'film' => 'Film Studies',
    'finearts' => 'Fine Arts',
    'forestry' => 'Forestry & Environmental Management',
    'french' => 'French',
    'german' => 'German Literature',
    'gerontology' => 'Gerontology',
    'history' => 'History',
    'ics' => 'Communication Studies',
    'journalism' => 'Journalism & Communications',
    'kinesiology' => 'Kinesiology',
    'law' => 'Law',
    'math' => 'Mathematics and Statistics',
    'media' => 'Media Arts and Cultures',
    // 'miscellaneous' => 'Miscellaneous',
    'music' => 'Music',
    'nativestudies' => 'Native Studies',
    'nursing' => 'Nursing & Health',
    'philosophy' => 'Philosophy',
    'physics' => 'Physics',
    'politicalscience' => 'Political Science',
    'psychology' => 'Psychology',
    'religiousstudies' => 'Religious Studies',
    'sts' => 'Science & Technology Studies',
    'socialwork' => 'Social Work',
    'sociology' => 'Sociology',
    'spanish' => 'Spanish Literature',
    'womensstudies' => 'Gender and Women\'s Studies',
  ];
  asort($categories);

  return $categories;
}

/**
 * Get UNB Libraries department label, given an email mailbox.
 *
 * @param string $mailbox
 *   A email mailbox string identifying a UNB Libraries Department without a Drupal user account.
 *
 * @return string
 *   The name of the UNB Libraries department.
 */
function _lib_core_contactable_department($mailbox) {
  // Contact webform may send messages to the following mailboxes.
  $departments = [
    'archives' => 'Archives and Special Collections',
    'askus' => 'Ask Us',
    'circhi' => 'Commons Service Desk',
    'copyright' => 'Copyright',
    'data.gis' => 'Data & GIS',
    'digitalscholar' => 'Centre for Digital Scholarship',
    'docdel' => 'Document Delivery Unit',
    'englib' => 'Engineering & Computer Science',
    'govdocs' => 'Government Documents, Data and Maps',
    'hilif' => 'Instruction Facilities',
    'hilref' => 'Reference',
    'hwkacq' => 'HWK Acquisitions',
    'hwkcommons' => 'Hans W. Klohn Commons',
    'hwkcreserves' => 'HWK Reserves',
    'lawlib' => 'Law Library',
    'lib' => 'UNB Libraries Administration',
    'library' => 'UNB Libraries Administration',
    'libweb' => 'Website Administrator',
    'maproom' => 'Map Room',
    'mic' => 'Microforms/Microfilming Services',
    'rdm' => 'Research Data Management',
    'refsj' => 'Saint John Reference',
    'reserves' => 'Course Reserves',
    'scilib' => 'Science & Forestry',
    'worldcat' => 'WorldCat Support',
  ];

  return array_key_exists($mailbox, $departments) ? $departments[$mailbox] : NULL;
}

/**
 * Implements hook_page_attachments().
 */
function lib_core_page_attachments(array &$attachments) {
  if (!\Drupal::currentUser()->hasPermission('access toolbar')) {
    return;
  }

  $attachments['#attached']['library'][] = 'lib_core/toolbar-overrides';
}

/**
 * Validate a UNB/STU user, given their barcode number.
 *
 */
function _lib_core_validate_user(&$form, FormStateInterface &$form_state) {
  $ajax_response = new AjaxResponse();
  $barcode = $form_state->getValue('barcode');
  $biblio_disabled = true;
  $email = NULL;
  $text = 'Please enter a barcode to validate.';

  if (isset($barcode) && !empty($barcode)) {
    $oclcApiIDMWskey = '';
    $oclcApiIDMSecret = '';
    include '/app/html/sites/all/settings/settings.oclc-api.inc';

    $authOpts = [
      'clientId' => $oclcApiIDMWskey,
      'clientSecret' => $oclcApiIDMSecret,
      'urlAuthorize' => 'https://oauth.oclc.org/auth',
      'urlAccessToken' => 'https://oauth.oclc.org/token',
      'urlResourceOwnerDetails' => '',
    ];
    $basicAuth = new HttpBasicAuthOptionProvider();
    $provider = new GenericProvider($authOpts, ['optionProvider' => $basicAuth]);
    $inst = '133054';
    try {
      $accessToken = $provider->getAccessToken('client_credentials', ['scope' => "SCIM"]);
      $headers = [
        'Authorization' => 'Bearer ' . $accessToken->getToken(),
        'Content-Type' => 'application/scim+json',
      ];
      $url = "https://{$inst}.share.worldcat.org/idaas/scim/v2/Users/.search";
      $query = '{
      "schemas": ["urn:ietf:params:scim:api:messages:2.0:SearchRequest"],
      "filter": "External_ID eq \"' . $barcode . '\""
    }';
      $client = new Client();
      $response = $client->request('POST', $url, ['headers' => $headers, 'body' => $query]);
      $body = json_decode($response->getBody(TRUE));
      if ($body->totalResults == 0) {
        $text = '<span class="text-danger has-error"><span class="fas fa-exclamation-circle mr-1"></span>Unable to validate user at this time.</span>';
      }
      $allowedCat = ['FACSTAFF-STU', 'FACSTAFF-UNB', 'GRAD-UNB', 'UG-STU', 'UG-UNB', 'UG-UNB-DMNB', 'UG-UNB-LAW'];
      $circInfo = $body->Resources[0]->{'urn:mace:oclc.org:eidm:schema:persona:wmscircpatroninfo:20180101'}->circulationInfo;

      if (!$circInfo->isCircBlocked && in_array($circInfo->borrowerCategory, $allowedCat)) {
        $biblio_disabled = false;
        $text = '<span class="text-success valid"><span class="fas fa-check-circle mr-1"></span>User validated.</span>';
        foreach($body->Resources[0]->emails as $email) {
          if ($email->primary) {
            $email = $email->value;
          }
        }
        if (isset($body->Resources[0]->name)) {
          $name = trim($body->Resources[0]->name->givenName . " " . $body->Resources[0]->name->familyName);
        }
      } else {
        $text = '<span class="text-danger invalid"><span class="fas fa-exclamation-circle mr-1"></span>User not validated.</span>';
      }
    } catch (Throwable $error) {
      $text = '<span class="text-danger has-error"><span class="fas fa-exclamation-circle mr-1"></span>Unable to validate user at this time.</span>';
      \Drupal::logger('lib_core')->error($error);
    }

  }

  $ajax_response->addCommand(new HtmlCommand('.form-item-barcode .webform-element-description', $text));
  $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-name"]', 'val', array($name)));
  $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-unb-stu-email"]', 'val', array($email)));
  $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-bibliographic-information"]', 'attr', array('disabled', $biblio_disabled)));
  return $ajax_response;
}
