<?php

/**
 * @file
 * Contains lib_core.module.
 */
require 'vendor/autoload.php';

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use League\OAuth2\Client\OptionProvider\HttpBasicAuthOptionProvider;
use League\OAuth2\Client\Provider\GenericProvider;
use GuzzleHttp\Client;
use Scriptotek\Marc\Record;

/**
 * Implements hook_theme().
 */
function lib_core_theme($existing, $type, $theme, $path) {
  return [
    'help_info' => [
      'variables' => ['info' => NULL],
    ],
    'proxy_login' => [
      'variables' => ['url' => NULL],
    ],
  ];
}

/**
 * Implements hook_editor_js_settings_alter().
 *
 * @see https://www.drupal.org/project/colorbutton/issues/2910028
 */
function lib_core_editor_js_settings_alter(array &$settings) {
  $extra_editor_settings = [
    'colorButton_foreStyle' => [
      'element' => 'span',
      'attributes' => [
        'data-color' => '#(color)',
      ],
    ],
  ];

  if (array_key_exists('library_page_html', $settings['editor']['formats'])) {
    $settings['editor']['formats']['library_page_html']['editorSettings'] += $extra_editor_settings;
  }
}

/**
 * Implements hook_entity_presave().
 */
function lib_core_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'faculties':
      $name = $entity->getName();
      $selected_campus = $entity
        ->get('field_campus')
        ->getString();

      $campus_options = array_keys(
        $entity
          ->get('field_campus')
          ->getSetting('allowed_values')
      );
      // Strip any allowed, appended campus key from name field for display name.
      $display_name = trim(str_replace($campus_options, "", $name));
      $entity->set('field_display_name', $display_name);
      // Append current selected campus key to term name.
      $entity->setName($display_name . ' ' . $selected_campus);
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function lib_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'entity_browser_media_entity_browser_form':
      // Add entity browser library for improvements.
      $form['#attached']['library'][] = 'lib_core/table-row-check';
      break;

    case 'node_library_page_form':
    case 'node_library_page_edit_form':
      // Attach CSS libraries for Library page content type form enhancements.
      $form['#attached']['library'][] = 'lib_core/seven-overrides';

      // Remove 'Change to: Private revision' save option on *new* library page form.
      if ($form_id === 'node_library_page_form' &&
      isset($form['moderation_state']['widget'][0]['state']['#options']['work_in_progress'])) {
        unset ($form['moderation_state']['widget'][0]['state']['#options']['work_in_progress']);
      }
      break;

    case 'node_news_post_form':
    case 'node_news_post_edit_form':
      $form['#attached']['library'][] = 'lib_core/seven-overrides';

      $form['promote']['widget']['value']['#title'] = t('Set as rotating front page feature');
      break;

    case 'video_embed_dialog':
      // Disable ability to enable Autoplay setting.
      $form['settings']['autoplay']['#access'] = FALSE;
      break;

    case 'views_exposed_form':
      if (isset($form['type']['#options']['carousel'])) {
        if (\Drupal::currentUser()->id() != 1) {
          // Only show 'Carousel' exposed form filter for root user.
          unset($form['type']['#options']['carousel']);
          unset($form['type']['#options']['booking_space']);
        }
      };
      break;

    case 'webform_submission_purchase_suggestion_add_form':
    case 'webform_submission_material_retrieval_add_form':
      $form['#attached']['library'][] = 'lib_core/chosen-bootstrap';
      break;

    case 'webform_submission_contact_add_form':
      // Move Recipient | Default value from hidden form input (Webform 8.x-5.7+).
      if (!isset($form['elements']['recipient']['#default_value'])) {
        $username = "libweb";
      } else {
        $recipient = explode("@unb.ca", $form['elements']['recipient']['#default_value']);
        $username = strtok($recipient[0], "@");
      }

      // Set default value for subject if not prepopulated (Webform 8.x-5.7+).
      if (!isset($form['elements']['email_us']['subject']['#default_value'])) {
        $form['elements']['email_us']['subject']['#value'] = 'Patron Web Query';
      }

      if ($user = user_load_by_name($username)) {
        $alert_msg =
          '<div class="d-flex">' .
            '<div class="pr-1"><i class="fas fa-info-circle"></i></div>' .
            '<div class="align-self-start">Please complete the following webform to send email toÂ <b>' .
              $user->get('field_first_name')->getString() . ' ' .
              $user->get('field_last_name')->getString() . '</b>. ' .
              'You may also <a href="mailto:' . $username .
              '@unb.ca?subject=Patron Webform Query">use your own email program</a>, if configured.
            </div>' .
          '</div>';

        // Set recipient to user profile's Email address value.
        $user_email = user_load_by_name($username)
          ->get('mail')
          ->getString();
        $form['elements']['recipient']['#default_value'] = $user_email;
      }
      elseif ($department = _lib_core_contactable_department($username)) {
        $alert_msg =
          '<div class="d-flex">
            <div class="pr-1"><i class="fas fa-info-circle"></i></div>
            <div class="align-self-start">';

        // Custom alert for 'Web Feedback' form, aka Website Administrator (libweb).
        $alert_msg .=
          ($username == 'libweb')
          ? 'Please let us know if you experience any difficulties in accessing our pages or find content which you
             believe is inaccurate. General suggestions, questions, or comments about this website can be directed to
             our <a href="/services/your-comments-and-suggestions">Suggestion Form</a>.'
          : 'Please complete the following webform to send email to <b>' .
            $department . '</b>. You may also <a href="mailto:' . $username .
            '@unb.ca?subject=Patron Webform Query">use your own email program</a>, if configured.';
        $alert_msg .=
            '</div>
          </div>';

        // Set recipient to department email_id@unb.ca.
        $form['elements']['recipient']['#default_value'] = $username . "@unb.ca";
      }
      else {
        $alert_msg = FALSE;
      }

      if ($alert_msg) {
        $form['elements']['contact_message']['#message_message']['#markup'] = $alert_msg;

        // Change 'Email Us' fieldset label for 'Web Feedback' form.
        if ($username == 'libweb') {
          $form['elements']['email_us']['#title'] = 'Email our Website Administrator';
        }
      }
      else {
        // Somebody messed with form argument (or perhaps email id typo) - prevent submissions.
        $form['actions']['submit']['#attributes']['disabled'] = 'disabled';
        $form['elements']['contact_message']['#message_message']['#markup'] =
          '<div class="d-flex">
            <div class="pr-1"><i class="fas fa-exclamation-triangle"></i></div>
            <div class="align-self-start">Sorry, <b>' .
              $username . '</b> is not a valid UNB Libraries recipient. Messaging is <b>disabled</b>.
            </div>
           </div>';
      }
      break;

    case 'webform_submission_recalls_add_form':
      $form['#attached']['library'][] = 'lib_core/chosen-bootstrap';
      $form['elements']['step_1']['personal_information']['barcode']['#ajax'] = [
        'callback' => '_lib_core_recalls_barcode_ajax_handler',
        'disable-refocus' => TRUE,
        'event' => 'blur',
        'progress' => [
          'type' => 'fullscreen',
        ],
      ];
      $form['elements']['step_2']['bibliographic_information']['oclc_number']['#ajax'] = [
        'callback' => '_lib_core_recalls_ocn_ajax_handler',
        'disable-refocus' => TRUE,
        'event' => 'blur',
        'progress' => [
          'type' => 'fullscreen',
        ],
      ];

      $form['#validate'][] = '_lib_core_recalls_validate_handler';
      break;

    default:
      break;
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * @see https://www.drupal.org/project/metatag/issues/2958193
 */
function lib_core_page_attachments_alter(array &$attachments) {
  // Trim all meta tags to a max length.
  if (!empty($attachments['#attached']['html_head'])) {
    // Adjust this as needed.
    $max_length = 200;
    foreach ($attachments['#attached']['html_head'] as &$tag) {
      // Only process meta tags with a 'content' attribute, that way it will
      // exclude LINK tags or meta tags which do not have a "content" value.
      if (isset($tag[0]['#tag']) && $tag[0]['#tag'] == 'meta') {
        if (isset($tag[0]['#attributes']['content'])) {
          if (!is_string($tag[0]['#attributes']['content'])) {
            $tag[0]['#attributes']['content'] = (string) $tag[0]['#attributes']['content'];
          }
          if (strlen($tag[0]['#attributes']['content']) > $max_length) {
            $tag[0]['#attributes']['content'] = mb_strimwidth($tag[0]['#attributes']['content'], 0, $max_length, "...");
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function lib_core_preprocess_node__news_post(&$variables) {
  $node = $variables['node'];

  $node_authoredon = $node->getCreatedTime();
  $formatted_date = \Drupal::service('date.formatter')->format($node_authoredon, 'metadata_date');
  $variables['formatted_date'] = $formatted_date;

  $fname = $node
    ->getOwner()
    ->get('field_first_name')
    ->getString();
  $lname = $node
    ->getOwner()
    ->get('field_last_name')
    ->getString();
  $author = $fname . ' ' . $lname;
  $variables['author'] = $lname ? $author : 'Admin';

  $stickied = $node->isSticky();
  $variables['stickied'] = $stickied;
}

/**
 * Implements hook_user_presave().
 */
function lib_core_user_presave($account) {
  // Auto-populate hidden Email ID field for use by Staff Directory View.
  $email = $account
    ->get('mail')
    ->getString();

  // Get lowercase version of email id.
  $email_id = strtolower(strtok($email, "@"));

  // Populate Email ID field.
  if (!empty($email) && $account->hasField('field_email_id')) {
    $account->set('field_email_id', $email_id);
  }
}

/**
 * Implements hook_views_query_alter().
 */
function lib_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() != 'content') {
    return;
  }

  $user = Drupal::currentUser();
  if (!$user->hasPermission('edit any library_page content')) {
    $query->addWhere(1, 'type', 'library_page', '!=');
  }
  if (!$user->hasPermission('edit any news_post content')) {
    $query->addWhere(1, 'type', 'news_post', '!=');
  }
}

/**
 * Implements hook_page_attachments().
 */
function lib_core_page_attachments(array &$attachments) {
  if (!\Drupal::currentUser()->hasPermission('access toolbar')) {
    return;
  }

  $attachments['#attached']['library'][] = 'lib_core/toolbar-overrides';
}

/**
 * Get UNB Libraries department label, given an email mailbox.
 *
 * @param string $mailbox
 *   A email mailbox string identifying a UNB Libraries Department without a Drupal user account.
 *
 * @return string
 *   The name of the UNB Libraries department.
 */
function _lib_core_contactable_department($mailbox) {
  // Contact webform may send messages to the following mailboxes.
  $departments = [
    'archives' => 'Archives and Special Collections',
    'askus' => 'Ask Us',
    'circhi' => 'Commons Service Desk',
    'copyright' => 'Copyright',
    'data.gis' => 'Data & GIS',
    'digitalscholar' => 'Centre for Digital Scholarship',
    'docdel' => 'Document Delivery Unit',
    'englib' => 'Engineering & Computer Science',
    'govdocs' => 'Government Documents, Data and Maps',
    'hilif' => 'Instruction Facilities',
    'hilref' => 'Reference',
    'hwkacq' => 'HWK Acquisitions',
    'hwkcommons' => 'Hans W. Klohn Commons',
    'hwkcreserves' => 'HWK Reserves',
    'lawlib' => 'Law Library',
    'lib' => 'UNB Libraries Administration',
    'library' => 'UNB Libraries Administration',
    'libweb' => 'Website Administrator',
    'maproom' => 'Map Room',
    'mic' => 'Microforms/Microfilming Services',
    'rdm' => 'Research Data Management',
    'refsj' => 'Saint John Reference',
    'reserves' => 'Course Reserves',
    'scilib' => 'Science & Forestry',
    'worldcat' => 'WorldCat Support',
  ];

  return array_key_exists($mailbox, $departments) ? $departments[$mailbox] : NULL;
}

/**
 * Port get_guide_categories() from core/inc-2015/guide_categories.php.
 *
 * @return array
 *   Associative array of Research Subjects where key = URL, value = label.
 */
function _lib_core_get_guide_categories() {
  $categories = [
    'anthropology' => 'Anthropology',
    'biology' => 'Biology',
    'business' => 'Business & Management',
    'chemistry' => 'Chemistry',
    'classics' => 'Classics and Ancient History',
    'computerscience' => 'Computer Science',
    'criminology' => 'Criminology',
    'development' => 'International Development Studies',
    'earth-sciences' => 'Earth Sciences',
    'economics' => 'Economics',
    'education' => 'Education',
    'engineering' => 'Engineering',
    'english' => 'English',
    'entrepreneurship' => 'Entrepreneurship',
    'familyviolence' => 'Family Violence Issues',
    'film' => 'Film Studies',
    'finearts' => 'Fine Arts',
    'forestry' => 'Forestry & Environmental Management',
    'french' => 'French',
    'german' => 'German Literature',
    'gerontology' => 'Gerontology',
    'history' => 'History',
    'ics' => 'Communication Studies',
    'journalism' => 'Journalism & Communications',
    'kinesiology' => 'Kinesiology',
    'law' => 'Law',
    'math' => 'Mathematics and Statistics',
    'media' => 'Media Arts and Cultures',
    // 'miscellaneous' => 'Miscellaneous',
    'music' => 'Music',
    'nativestudies' => 'Native Studies',
    'nursing' => 'Nursing & Health',
    'philosophy' => 'Philosophy',
    'physics' => 'Physics',
    'politicalscience' => 'Political Science',
    'psychology' => 'Psychology',
    'religiousstudies' => 'Religious Studies',
    'sts' => 'Science & Technology Studies',
    'socialwork' => 'Social Work',
    'sociology' => 'Sociology',
    'spanish' => 'Spanish Literature',
    'womensstudies' => 'Gender and Women\'s Studies',
  ];
  asort($categories);

  return $categories;
}

/**
 * Custom Recall Form validation.
 *
 * @param array $form
 *   The publication form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The object containing the current state of the Recalls form.
 * @return \Drupal\Core\Ajax\AjaxResponse $ajax_response
 *   Ajax response, based on barcode validation.
 */
function _lib_core_recalls_barcode_ajax_handler(array &$form, FormStateInterface $form_state) {
  $ajax_response = new AjaxResponse();
  $biblio_disabled = true;

  $name = $form_state->getValue('name');
  $email = $form_state->getValue('unb_stu_email');
  $barcode = $form_state->getValue('barcode');

  // Parse validation response - generate barcode description text, name & email values, toggle biblio fieldset.
  $validation_response = _lib_core_validate_recalls_barcode($barcode);
  switch ($validation_response['status']) {
    case 'valid':
      $biblio_disabled = false;
      $text = '<span class="text-success valid">
               <span class="fas fa-check-circle mr-1"></span>User barcode found</span>';
      $email = $validation_response['email'];
      $name = $validation_response['name'];
      break;
    case 'invalid':
      $text = '<span class="text-danger invalid"><span class="fas fa-times-circle mr-1"></span>
               User barcode not found - only current students, faculty, and staff may recall an item</span>';
      $name = $email = null;
      break;
    case 'error':
      $text = '<span class="text-danger has-error"><span class="fas fa-exclamation-circle mr-1"></span>
               Unable to validate user barcode at this time</span>';
      $name = $email = null;
      break;
    default:
      $text = 'Enter your barcode number to have the system autofill personal information fields <em>(use the small number found below your picture on your <a data-target="#ucardModal" data-toggle="modal" href="#"> <em class="fa-id-card fas ml-1">&nbsp;</em><strong>UCard</strong>)</a></em>
        <div aria-hidden="true" aria-labelledby="ucardModalLabel" class="modal fade theme-dark" id="ucardModal" role="dialog" tabindex="-1">
          <div class="modal-dialog" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h1 class="h5 text-black" id="ucardModalLabel">Sample UCard</h1>
                <a aria-label="Close" class="btn close" data-dismiss="modal" href="#"><span aria-hidden="true">&times;</span></a>
              </div>
              <div class="modal-body mx-auto"><a data-target="#ucardModal" data-toggle="modal" href="#"><img alt="Sample UCard" src="/themes/custom/lib_unb_ca/img//ucard-sample.png" /></a></div>
            </div>
          </div>
        </div>';
  }

  $ajax_response->addCommand(new HtmlCommand('.form-item-barcode .webform-element-description', $text));
  $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-name"]', 'val', array($name)));
  $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-unb-stu-email"]', 'val', array($email)));
  $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-bibliographic-information"]', 'attr', array('disabled', $biblio_disabled)));

  return $ajax_response;
}

/**
 * Custom Recall Form validation.
 *
 * @param array $form
 *   The publication form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The object containing the current state of the Recalls form.
 * @return \Drupal\Core\Ajax\AjaxResponse $ajax_response
 *   Ajax response, based on barcode validation.
 */
function _lib_core_recalls_ocn_ajax_handler(array &$form, FormStateInterface $form_state) {
  $ajax_response = new AjaxResponse();
  $ocn = $form_state->getValue('oclc_number');

  // Parse validation response - generate barcode description text, name & email values, toggle biblio fieldset.
  $response = _lib_core_validate_recalls_ocn($ocn);
  switch ($response['status']) {
    case 'valid':
      $text = '<span class="text-success valid">
               <span class="fas fa-check-circle mr-1"></span>OCLC number <samp class="text-secondary">' . $ocn .
              '</samp> is eligible for recall</span>';
      $title = $response['title'];
      $author = $response['author'];
      $volume = $response['volume'];
      $call = $response['call'];
      $shelving = $response['shelving'];
      break;
    case 'ineligible':
      $text = '<span class="text-danger invalid">
               <span class="fas fa-times-circle mr-1"></span>OCLC number <samp class="text-secondary">' . $ocn .
              '</samp> is ineligible for recall</span>';
      $title = $response['title'];
      $author = $response['author'];
      $volume = $response['volume'];
      $call = $response['call'];
      $shelving = null;
      break;
    case 'unavailable':
      $text = '<span class="text-danger invalid">
               <span class="fas fa-times-circle mr-1"></span>OCLC number <samp class="text-secondary">' . $ocn .
        '</samp> is not held by UNB Libraries</span>';
      $title = $response['title'];
      $author = $response['author'];
      $volume = $response['volume'];
      $call = $response['call'];
      $shelving = null;
      break;
    case 'invalid':
      $text = '<span class="text-danger invalid"><span class="fas fa-times-circle"></span>
               OCLC number <samp class="text-secondary">' . $ocn . '</samp> was not found';
      $title = $author = $volume = $call = $shelving = null;
      break;
    case 'error':
      $text = '<span class="text-danger has-error"><span class="fas fa-exclamation-circle"></span>
               Unable to validate OCLC number at this time</span>';
      $title = $author = $volume = $call = $shelving = null;
      break;
    default:
      $text = 'Enter an OCLC Control Number to have the system autofill bibliographic, call number and location fields';
      $title = $author = $volume = $call = $shelving = null;
  }

  $ajax_response->addCommand(new HtmlCommand('.form-item-oclc-number .webform-element-description', $text));
  $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-title"]', 'val', array($title)));
  $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-author"]', 'val', array($author)));
  $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-volume"]', 'val', array($volume)));
  $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-call-number"]', 'val', array($call)));
  // Trigger chosen single select selection.
  if ($shelving) {
    $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-shelving-location"]', 'val', array($shelving)));
    $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-shelving-location"]', 'trigger', ['chosen:updated']));
  } else {
    $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-shelving-location"] option', 'prop', array('selected', false)));
    $ajax_response->addCommand(new InvokeCommand('[data-drupal-selector="edit-shelving-location"]', 'trigger', ['chosen:updated']));
  }
  return $ajax_response;
}

/**
 * Validate a UNB/STU user, given their barcode number.
 *
 * @param string $ocn
 *  A user-entered OCLC number or shared record URL.
 *
 * @return string
 *  The formatted OCLC number.
 */
function _lib_core_recalls_ocn_formatter($ocn) {
  return trim(end(explode('/', $ocn)));
}

/**
 * Validate a UNB/STU user, given their barcode number.
 *
 * @param string $barcode
 * The UNB/STU user barcode.
 *
 * @return array $validation_response
 *   The validation response array, including barcode validation status and if valid, user name and email.
 */
function _lib_core_validate_recalls_barcode($barcode) {
  $validation_response = null;

  if (isset($barcode) && !empty($barcode)) {
    $oclcApiIDMWskey = '';
    $oclcApiIDMSecret = '';
    include '/app/html/sites/all/settings/settings.oclc-api.inc';

    $authOpts = [
      'clientId' => $oclcApiIDMWskey,
      'clientSecret' => $oclcApiIDMSecret,
      'urlAuthorize' => 'https://oauth.oclc.org/auth',
      'urlAccessToken' => 'https://oauth.oclc.org/token',
      'urlResourceOwnerDetails' => '',
    ];
    $basicAuth = new HttpBasicAuthOptionProvider();
    $provider = new GenericProvider($authOpts, ['optionProvider' => $basicAuth]);
    $inst = '133054';

    try {
      $accessToken = $provider->getAccessToken('client_credentials', ['scope' => "SCIM"]);
      $headers = [
        'Authorization' => 'Bearer ' . $accessToken->getToken(),
        'Content-Type' => 'application/scim+json',
      ];
      $url = "https://{$inst}.share.worldcat.org/idaas/scim/v2/Users/.search";
      $query = '{
        "schemas": ["urn:ietf:params:scim:api:messages:2.0:SearchRequest"],
        "filter": "External_ID eq \"' . $barcode . '\""
      }';
      $client = new Client();
      $response = $client->request('POST', $url, ['headers' => $headers, 'body' => $query]);
      $body = json_decode($response->getBody(TRUE));
      if ($body->totalResults == 0) {
        $validation_response['status'] = 'error';
      } else {
        $allowedCat = ['FACSTAFF-STU', 'FACSTAFF-UNB', 'GRAD-UNB', 'UG-STU', 'UG-UNB', 'UG-UNB-DMNB', 'UG-UNB-LAW'];
        $circInfo = $body->Resources[0]->{'urn:mace:oclc.org:eidm:schema:persona:wmscircpatroninfo:20180101'}->circulationInfo;

        if (!$circInfo->isCircBlocked && in_array($circInfo->borrowerCategory, $allowedCat)) {
          $validation_response['status'] = 'valid';
          foreach ($body->Resources[0]->emails as $email) {
            if ($email->primary) {
              $validation_response['email'] = $email->value;
            }
          }
          if (isset($body->Resources[0]->name)) {
            $validation_response['name'] = trim($body->Resources[0]->name->givenName . " " . $body->Resources[0]->name->familyName);
          }
        } else {
          $validation_response['status'] = 'invalid';
        }
      }
    } catch (Throwable $error) {
      $validation_response['status'] = 'error';
      \Drupal::logger('lib_core')->error($error);
    }
  }

  return $validation_response;
}

/**
 * Retrieve bibliographic info, given a valid OCLC number.
 *
 * @param string $ocn
 * The OCLC number.
 *
 * @return array $validation_response
 *   The validation response array, including oclc # validation status and if valid, biblio info.
 */
function _lib_core_validate_recalls_ocn($ocn) {
  $validation_response = null;

  if (isset($ocn) && !empty(trim($ocn))) {
    $oclcApiWskey = '';
    $oclcApiSecret = '';
    include '/app/html/sites/all/settings/settings.oclc-api.inc';

    $authOpts = [
      'clientId' => $oclcApiWskey,
      'clientSecret' => $oclcApiSecret,
      'urlAuthorize' => 'https://oauth.oclc.org/auth',
      'urlAccessToken' => 'https://oauth.oclc.org/token',
      'urlResourceOwnerDetails' => '',
    ];
    $basicAuth = new HttpBasicAuthOptionProvider();
    $provider = new GenericProvider($authOpts, ['optionProvider' => $basicAuth]);
    $inst = '133054';

    try {
      $accessToken = $provider->getAccessToken('client_credentials', ['scope' => "WMS_Availability context:{$inst}"]);
      $headers = ['Authorization' => "Bearer " . $accessToken->getToken()];
      $url = "https://worldcat.org/circ/availability/sru/service?x-registryId={$inst}&query=no:ocm{$ocn}";

      $client = new Client();
      $response = $client->request('GET', $url, ['headers' => $headers]);

      $xml = new \SimpleXMLElement((string)$response->getBody());
      if ($xml->numberOfRecords == 0) {
        $validation_response['status'] = 'invalid';
      } else {
        $opacRec = $xml->records->record->recordData->opacRecord;
        $record = Record::fromSimpleXMLElement($opacRec->bibliographicRecord->record);

        $validation_response = [
          'status' => 'valid',
          'title' => (string)$record->getTitle(),
          'author' => implode(', ', $record->getCreators()),
          'volume' => $record->query('490$v')->text(),
          'call' => '',
          'shelving' => '',
        ];

        if (!empty($opacRec->holdings)) {
          foreach ($opacRec->holdings->holding as $holding) {
            $location = (explode(':', (string)$holding->shelvingLocation, 2))[0];
            $call['items'][] = ['location' => $location, 'callNum' => (string)$holding->callNumber];
          }
          foreach ($call['items'] as $item) {
            if (_lib_core_validate_recalls_shelving($item['location'])) {
              $validation_response['call'] = $item['callNum'];
              $validation_response['shelving'] = $item['location'];
              $validation_response['status'] = 'valid';
              break;
            } else {
              $validation_response['status'] = 'ineligible';
            }
          }
        } else {
          $validation_response['status'] = 'unavailable';
        }
      }
    } catch (Throwable $error) {
      $validation_response['status'] = 'error';
      \Drupal::logger('lib_core')->error($error);
    }
  }

  return $validation_response;
}

function _lib_core_validate_recalls_shelving($shelving_option) {
  $eligible_recall_shelving_options = [
    'ENG-NONPRNT' => 'ENG-NONPRNT: Electronic media and other non-paper materials (Ask at Service Desk)',
    'ENG-SENRPT' => 'ENG-SENRPT: Senior Report Collection',
    'ENG-SPEC' => 'ENG-SPEC: Special Collection',
    'ENG-STACKS' => 'ENG-STACKS: Main Collection',
    'ENG-STOR' => 'ENG-STOR: Storage (Ask at Service Desk)',
    'ENG-STORA' => 'ENG-STORA: Storage (Ask at Service Desk)',
    'ENG-THS' => 'ENG-THS: Theses',
    'ENG-WIE' => 'ENG-WIE: Women in Engineering (WiE) Collection',
    'HWK-BEAT' => 'HWK-BEAT: Beat Generation Collection',
    'HWK-FOLIO' => 'HWK-FOLIO: Folio Shelves',
    'HWK-SFF' => 'HWK-SFF: Science Fiction & Fantasy Collection (Ask Staff)',
    'HWK-SFFA' => 'HWK-SFFA: Science Fiction & Fantasy Authors Collection',
    'HWK-SFWA' => 'HWK-SFWA: Science Fiction Writers of America Collection',
    'HWK-SFWA2' => 'HWK-SFWA: SFWA Collection (Ask Staff)',
    'HWK-STACKS' => 'HWK-STACKS: Main Collection',
    'HWK-STCAN' => 'HWK-STCAN: Statistics Canada Collection',
    'HWK-STOR' => 'HWK-STOR: Storage (Ask Staff)',
    'HIL-BBKRM' => 'HIL-BBKRM: Beaverbrook Room, 4th Floor',
    'HIL-CIRCDSK' => 'HIL-CIRCDSK: CD/DVD Materials (Ask at Service Desk), 1st Floor',
    'HIL-DBLOS' => 'HIL-DBLOS: Double Oversize, 4th Floor',
    'HIL-EASY' => 'HIL-EASY: Easy Books',
    'HIL-GOV' => 'HIL-GOV: Government Documents, Basement (Ask at Desk)',
    'HIL-GOVCD' => 'HIL-GOVCD: Government Documents CD-ROM, Basement (Ask at Desk)',
    'HIL-GOVCD2' => 'HIL-GOVCD: Government Documents CD-ROM, Basement (Ask at Desk) (Video)',
    'HIL-GOVOS' => 'HIL-GOVOS: Government Documents Oversize, Basement (Ask at Desk) ',
    'HIL-JUV' => 'HIL-JUV: Juvenile Books, Dewey and Fiction, 4th Floor',
    'HIL-JUVOS' => 'HIL-JUVOS: Juvenile Books Oversize, Dewey, Fiction and Easy, 4th Floor',
    'HIL-MAP' => 'HIL-MAP: Map Area (Ask at Desk)',
    'HIL-MAPBK' => 'HIL-MAPBK: Map Area Books, Basement',
    'HIL-MAPCD' => 'HIL-MAPCD: Map CD-ROM (Ask at Desk)',
    'HIL-MAPOS' => 'HIL-MAPOS: Map Area Oversize (Ask at Desk)',
    'HIL-OS' => 'HIL-OS: Oversize',
    'HIL-STACKS' => 'HIL-STACKS: Main Collection',
    'HIL-STORA' => 'HIL-STORA: Storage (Ask at Service Desk)',
    'HIL-THS' => 'HIL-THS: Education Theses, 4th Floor',
    'STORAGE' => 'STORAGE: Storage Facility',
    'LAW-STACKS' => 'LAW-STACKS: Main Collections',
    'LAW-STOR' => 'LAW-STOR: Storage (Ask at Circulation Desk)',
    'SCI-FORF' => 'SCI-FORF: Forestry Files',
    'SCI-OS' => 'SCI-OS: Oversize',
    'SCI-STACKS' => 'SCI-STACKS: Main Collection',
    'SCI-STOR' => 'SCI-STOR: Self-Serve Storage',
  ];

  return array_key_exists($shelving_option, $eligible_recall_shelving_options);
}

/**
 * Custom Recalls multi-step form field validation.
 *
 * @param array $form
 *   The Recalls form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The object containing the current state of the Recalls form.
 */
function _lib_core_recalls_validate_handler(array &$form, FormStateInterface $form_state) {
  $storage = $form_state->getStorage();
  $current_step = $storage['current_page'];

  switch ($current_step) {
    case 'step_1':
      $barcode_submission = $form_state->getValue('barcode');
      $validation_response = _lib_core_validate_recalls_barcode($barcode_submission);

      switch ($validation_response['status']) {
        case 'invalid':
          $form_state->setErrorByName(
            'barcode',
            t("Barcode <samp class=\"text-secondary\">{$barcode_submission}</samp> was not found")
          );
          break;

        default:
          // Proceed to "Step Two" wizard page.
      }
      break;

    case 'step_2':
      $ocn_submission = $form_state->getValue('oclc_number');
      $validation_response = _lib_core_validate_recalls_ocn($ocn_submission);

      switch ($validation_response['status']) {
        case 'ineligible':
          $form_state->setErrorByName(
            'oclc_number',
            t("OCLC number <samp class=\"text-secondary\">{$ocn_submission}</samp> is ineligible for recall")
          );
          break;

        case 'invalid':
          $form_state->setErrorByName(
            'oclc_number',
            t("OCLC number <samp class=\"text-secondary\">{$ocn_submission}</samp> was not found")
          );
          break;

        case 'unavailable':
          $form_state->setErrorByName(
            'oclc_number',
            t("OCLC number <samp class=\"text-secondary\">{$ocn_submission}</samp> is not held by UNB Libraries")
          );
          break;

        default:
          // Proceed to "Step One" wizard page or submit form.
      }
      break;

    default:
      // Unrecognized step.
      \Drupal::logger('lib_core')->error("Webform | Recalls | Unexpected wizard page step:$current_step.");
  }
}
