<?php

/**
 * @file
 * Contains install and update functions for lib_core.
 */

use Drupal\lib_core\TaxonomyHelper;
use Drupal\node\Entity\Node;
use Drupal\node_path_taxonomy\Entity\NodeTaxonomyPath;

/**
 * Implements hook_install().
 */
function lib_core_install() {
  module_set_weight('lib_core', 2);
  TaxonomyHelper::addDefaultCategoriesTerms();
  TaxonomyHelper::addDefaultDepartmentsTerms();
  TaxonomyHelper::addDefaultFacultiesTerms();
}

/**
 * LIB-107 Re-save all News articles to generate meta tags.
 */
function lib_core_update_8001() {
  $news_nids = \Drupal::entityQuery('node')
    ->condition('type', 'news_post')
    ->execute();

  $news_nodes = Node::loadMultiple($news_nids);
  foreach ($news_nodes as $news_node) {
    $news_node->save();
  }
}

/**
 * LIB-107 Re-save all Library Pages to generate meta tags.
 */
function lib_core_update_8002() {
  $page_nids = \Drupal::entityQuery('node')
    ->condition('type', 'library_page')
    ->execute();

  $page_nodes = Node::loadMultiple($page_nids);
  foreach ($page_nodes as $page_node) {
    $page_node->save();
  }
}

/**
 * LIB-218 Re-save all Library Pages again to generate real paths.
 */
function lib_core_update_8003(&$sandbox) {
  $types = [
    'library_page',
  ];

  // Set up the batch.
  if (!isset($sandbox['max'])) {
    $count_query = \Drupal::database()->select('node', 'n')
      ->condition('n.type', $types, 'IN');
    $count_query->addExpression('COUNT(n.nid)', 'count');
    $sandbox['max'] = $count_query->execute()->fetchField();
    $sandbox['position'] = 0;
  }

  $limit = 25;
  $nids = \Drupal::database()->select('node', 'n')
    ->condition('n.type', $types, 'IN')
    ->fields('n', ['nid'])
    ->orderBy('n.nid')
    ->range($sandbox['position'], $limit)
    ->execute()
    ->fetchCol();

  // Operate on this group of pages.
  foreach ($nids as $nid) {
    $page_node = Node::load($nid);
    $term = NodeTaxonomyPath::getNodePathTerm($page_node);
    // Set the state hook for this node. Without this it will use default.
    \Drupal::state()->set(NodeTaxonomyPath::getPathTaxonomyTidStateKey(), $term->id());
    $page_node->save();
    unset($page_node);
  }
  unset($nids);

  // Check if we are finished.
  $sandbox['position'] += $limit;
  if ($sandbox['max'] > 0 && $sandbox['max'] > $sandbox['position']) {
    $sandbox['#finished'] = $sandbox['position'] / $sandbox['max'];
  }
  else {
    $sandbox['#finished'] = 1;
  }

}
