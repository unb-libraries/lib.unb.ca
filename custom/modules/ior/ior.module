<?php

/**
 * @file
 * Contains ior.module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Url;
use Drupal\ior\Entity\ContestInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function ior_theme($existing, $type, $theme, $path) {
  return [
    'contest' => [
      'render element' => 'elements',
    ],
    'ior_submission' => [
      'render element' => 'elements',
    ],
    'ior_submission__preview' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for contest templates.
 *
 * Default template: contest.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_contest(array &$variables) {
  /** @var \Drupal\ior\Entity\ContestInterface $contest */
  $contest = $variables['elements']['#contest'];
  $variables['contest']['entity'] = $contest;

  foreach (Element::children($variables['elements']) as $key) {
    if ($contest->hasField($key) && !empty($contest->get($key)->getValue())) {
      $variables['contest'][$key] = $variables['elements'][$key];
      $variables['contest'][$key]['#label_display'] = 'hidden';
    }
  }
  $variables['contest']['is_open'] = $contest->isOpen();
  $variables['contest']['submission_type_label'] = $contest->getSubmissionType()->label();
  $variables['contest']['is_coming_up'] = $contest->isComingUp();
  $variables['contest']['is_closed'] = $contest->isClosed();
  $variables['contest']['submit_url'] = Url::fromRoute('entity.ior_submission.add_form', [
    'contest' => $contest->id(),
  ])->toString();
  $variables['contest']['submissions_url'] = Url::fromRoute('view.ior_submissions.page_1', [
    'contest' => $contest->id(),
  ])->toString();
}

/**
 * Prepares variables for submission templates.
 *
 * Default template: ior-submission.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_ior_submission(array &$variables) {
  /** @var \Drupal\ior\Entity\SubmissionInterface $submission */
  $submission = $variables['elements']['#ior_submission'];
  $variables['submission']['entity'] = $submission;
  foreach (Element::children($variables['elements']) as $key) {
    if ($submission->hasField($key) && !empty($submission->get($key)->getValue())) {
      $variables['submission'][$key] = $variables['elements'][$key];
      $variables['submission'][$key]['#label_display'] = 'hidden';
    }
  }

  $current_user = Drupal::currentUser();
  if ($current_user->hasPermission('view ior_submission moderation_state')) {
    /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
    $moderation_info = Drupal::service('content_moderation.moderation_information');
    $moderation_state = $moderation_info->getWorkflowForEntity($submission)
      ->getTypePlugin()
      ->getState($submission->get('moderation_state')->value);
    $variables['submission']['state']['id'] = $moderation_state->id();
    $variables['submission']['state']['label'] = $moderation_state->label();
  }

  $variables['submission']['published'] = $submission->isPublished();
  $variables['current_user']['view_contestant_info'] = $current_user->hasPermission('view contestant details');

  if ($submission->get('type')->entity->id() == 'image') {
    if (Drupal::currentUser()->hasPermission('download full_resolution images')) {
      $variables['submission']['image_url'] = $submission->getImageUrl();
    }
  }
  elseif ($submission->get('type')->entity->id() == '3dmodel' && !$current_user->hasPermission('download 3dmodel file')) {
    unset($variables['submission']['field_model']);
  }

  $submissions = array_values(array_filter($submission->getContest()->getSubmissions(), function ($submission) {
    return $submission->access('view');
  }));

  $index = array_search($submission, $submissions);
  if ($index - 1 >= 0) {
    $variables['prev_url'] = $submissions[$index - 1]
      ->toUrl();
  }
  if ($index + 1 < count($submissions)) {
    $variables['next_url'] = $submissions[$index + 1]
      ->toUrl();
  }

  // This should be done in a template?
  $variables['submission']['first_name']['#attributes']['class'][] = 'd-inline';
  $variables['submission']['last_name']['#attributes']['class'][] = 'd-inline';
}

/**
 * Prepares variables for submission templates.
 *
 * Default template: ior-submission.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_ior_submission__preview(array &$variables) {
  /** @var \Drupal\ior\Entity\SubmissionInterface $submission */
  $submission = $variables['elements']['#ior_submission'];
  $variables['submission']['entity'] = $submission;
  foreach (Element::children($variables['elements']) as $key) {
    $variables['submission'][$key] = $variables['elements'][$key];
    $variables['submission'][$key]['#label_display'] = 'hidden';
  }

  $current_user = Drupal::currentUser();
  if ($current_user->hasPermission('view ior_submission moderation_state')) {
    /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
    $moderation_info = Drupal::service('content_moderation.moderation_information');
    $moderation_state = $moderation_info->getWorkflowForEntity($submission)
      ->getTypePlugin()
      ->getState($submission->get('moderation_state')->value);
    $variables['#attached']['library'][] = 'ior/ior';
    $variables['submission']['state']['id'] = $moderation_state->id();
    $variables['submission']['state']['label'] = $moderation_state->label();
  }

  $variables['current_user']['view_contestant_info'] = $current_user->hasPermission('view contestant details');
  $variables['submission']['published'] = $submission->isPublished();
  $variables['submission']['url'] = $variables['elements']['#ior_submission']
    ->toUrl()
    ->toString();

  // This should be done in a template?
  $variables['submission']['first_name']['#attributes']['class'][] = 'd-inline';
  $variables['submission']['last_name']['#attributes']['class'][] = 'd-inline';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ior_theme_suggestions_ior_submission_alter(array &$suggestions, array $variables) {
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $suggestion = 'ior_submission__' . $sanitized_view_mode;
  if (!in_array($suggestion, $suggestions)) {
    $suggestions[] = $suggestion;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function ior_contest_insert(ContestInterface $contest) {
  $view = \Drupal::entityTypeManager()
    ->getStorage('view')
    ->load('ior_submissions');
  Drupal::service('views.alias_generator')
    ->generateViewAlias($view, $contest);
}

/**
 * Convert (almost) all fields to basefields.
 */
function ior_update_9001(&$sandbox) {
  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $definition_update_manager */
  $definition_update_manager = Drupal::service('entity.definition_update_manager');
  /** @var \Drupal\custom_entity_update_n\Entity\DataUpdateManagerInterface $field_data_update_manager */
  $field_data_update_manager = Drupal::service('entity_field.data_update.manager');

  foreach (base_field_additions_9001() as $field_id => $field_definition) {
    // Install the field
    $definition_update_manager->installFieldStorageDefinition(
      $field_id,
      'ior_submission',
      'ior',
      $field_definition
    );

    // Migrate existing field data
    $field_data_update_manager->move(
      "field_$field_id",
      $field_id,
      'ior_submission');
  }
}

function base_field_additions_9001() {
  return [
    'contest' => BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Contest'))
      ->setRequired(TRUE)
      ->setRevisionable(FALSE)
      ->setSetting('target_type', 'contest')
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayConfigurable('form', FALSE),
    'first_name' => BaseFieldDefinition::create('string')
      ->setLabel(t('First name'))
      ->setRequired(TRUE)
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('view', ['weight' => 10])
      ->setDisplayOptions('form', ['weight' => 10]),
    'last_name' => BaseFieldDefinition::create('string')
      ->setLabel(t('Last name'))
      ->setRequired(TRUE)
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('view', ['weight' => 20])
      ->setDisplayOptions('form', ['weight' => 20]),
    'email' => BaseFieldDefinition::create('email')
      ->setLabel(t('UNB Email'))
      ->setRequired(TRUE)
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('view', ['weight' => 30])
      ->setDisplayOptions('form', ['weight' => 30]),
    'department' => BaseFieldDefinition::create('string')
      ->setLabel(t('Department & Faculty'))
      ->setRequired(TRUE)
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('view', ['weight' => 40])
      ->setDisplayOptions('form', ['weight' => 40]),
    'website' => BaseFieldDefinition::create('link')
      ->setLabel(t('Research URL'))
      ->setRequired(FALSE)
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('view', ['weight' => 50])
      ->setDisplayOptions('form', ['weight' => 50]),
    'title' => BaseFieldDefinition::create('string')
      ->setLabel(t('Title'))
      ->setRequired(TRUE)
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('view', ['weight' => 60])
      ->setDisplayOptions('form', ['weight' => 60]),
    'description' => BaseFieldDefinition::create('text_long')
      ->setLabel(t('Description'))
      ->setRequired(TRUE)
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('view', ['weight' => 70])
      ->setDisplayOptions('form', [
        'third_party_settings' => [
          'allowed_formats' => [
            'hide_help' => TRUE,
            'hide_guidelines' => TRUE,
          ],
        ],
        'weight' => 70,
      ])
      ->setSettings([
        'allowed_formats' => [
          'no_media_html_ior_',
        ],
      ]),
    'terms_conditions_accepted' => BaseFieldDefinition::create('boolean')
      ->setLabel(t('Terms & Conditions accepted'))
      ->setRequired(TRUE)
      ->setRevisionable(FALSE)
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', ['weight' => 80])
  ];
}

/**
 * Set 'contest.accepted_submissions' default value.
 */
function ior_update_9002(&$sandbox) {
  $db = Drupal::database();
  /** @var \Drupal\ior\Entity\Storage\ContestStorageInterface $contest_storage */
  $contest_storage = Drupal::entityTypeManager()->getStorage('contest');
  $contests = $contest_storage->loadMultiple();

  foreach ($contests as $contest) {
    /** @var \Drupal\ior\Entity\ContestInterface $contest */
    $db->insert('contest__field_accepted_submissions')->fields([
      'bundle' => 'contest',
      'deleted' => 0,
      'entity_id' => $contest->id(),
      'revision_id' => $contest->getRevisionId(),
      'langcode' => 'und',
      'delta' => 0,
      'field_accepted_submissions_target_id' => 'image',
    ])->execute();

    $revisions = $contest_storage->loadEntityRevisions($contest);
    foreach ($revisions as $revision) {
      $db->insert('contest_revision__field_accepted_submissions')->fields([
        'bundle' => 'contest',
        'deleted' => 0,
        'entity_id' => $contest->id(),
        'revision_id' => $revision->id(),
        'langcode' => 'und',
        'delta' => 0,
        'field_accepted_submissions_target_id' => 'image',
      ])->execute();
    }
  }
}

/**
 * Install 'ior_submission.type' field and set default value.
 */
function ior_update_9003(&$sandbox) {
  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $definition_update_manager */
  $definition_update_manager = Drupal::service('entity.definition_update_manager');
  /** @var \Drupal\custom_entity_update_n\Entity\DataUpdateManagerInterface $field_data_update_manager */
  $field_data_update_manager = Drupal::service('entity_field.data_update.manager');

  $type_field = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Submission type'))
    ->setSetting('target_type', 'ior_submission_type')
    ->setRequired(TRUE)
    ->setReadOnly(TRUE);

  $definition_update_manager->installFieldStorageDefinition(
    'type',
    'ior_submission',
    'ior',
    $type_field
  );

  $field_data_update_manager->set('type', 'ior_submission', ['target_id' => 'image']);
}

/**
 * Transfer 'ior_submission.field_image' values to "image" bundle.
 */
function ior_update_9004(&$sandbox) {
  $db = Drupal::database();
  $db->update('ior_submission__field_image')
    ->fields(['bundle' => 'image'])
  ->execute();
  $db->update('ior_submission_revision__field_image')
    ->fields(['bundle' => 'image'])
    ->execute();
}
