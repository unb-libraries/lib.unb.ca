<?php

/**
 * @file
 * Contains ior_awards.module.
 */

/**
 * Implements hook_theme().
 */
function ior_awards_theme($existing, $type, $theme, $path) {
  return [
    'contest' => [
      'base hook' => 'contest',
      'preprocess functions' => array_merge($existing['contest']['preprocess functions'], [
        'ior_awards_template_preprocess_contest',
      ]),
    ],
    'ior_submission__winner' => [
      'render element' => 'ior_submission',
    ],
    'ior_award__winner' => [
      'render element' => 'award',
    ],
    'page_title__ior_submission' => [
      'base hook' => 'page_title',
    ],
  ];
}

/**
 * Prepares variables for contest templates.
 *
 * Default template: contest.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function ior_awards_template_preprocess_contest(array &$variables) {
  /** @var \Drupal\ior\Entity\ContestInterface $contest */
  $contest = $variables['elements']['#contest'];
  foreach (Drupal::entityTypeManager()->getStorage('ior_collection')->loadByContest($contest->id()) as $collection) {
    $variables['contest']['collections'][$collection->id()] = [
      'url' => \Drupal\Core\Url::fromRoute('view.ior_contest_collection.page_1', [
        'contest' => $contest->id(),
        'collection' => $collection->id(),
      ]),
      'title' => $collection->get('field_title')->value,
    ];
  }

  $variables['contest']['winners_url'] = \Drupal\Core\Url::fromRoute('entity.contest.winners', [
    'contest' => $contest->id(),
  ])->toString();
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function ior_awards_theme_suggestions_ior_submission(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $suggestions[] = 'ior_submission__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Prepares variables for submission templates.
 *
 * Default template: ior-submission.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_ior_submission__winner(array &$variables) {
  /** @var \Drupal\ior\Entity\SubmissionInterface $submission */
  $submission = $variables['elements']['#ior_submission'];
  $variables['submission']['entity'] = $submission;
  foreach (\Drupal\Core\Render\Element::children($variables['elements']) as $key) {
    if ($submission->hasField($key) && !empty($submission->get($key)->getValue())) {
      $variables['submission'][$key] = $variables['elements'][$key];
      $variables['submission'][$key]['#label_display'] = 'hidden';
    }
  }
  $variables['submission']['url'] = $submission->toUrl()->toString();

  // This should be done in a template?
  $variables['submission']['field_first_name']['#attributes']['class'][] = 'd-inline';
  $variables['submission']['field_last_name']['#attributes']['class'][] = 'd-inline';
  $variables['submission']['field_department']['#attributes']['class'][] = 'd-inline';
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function ior_awards_theme_suggestions_page_title(array $variables) {
  $suggestions = [];
  if (_get_submission_from_route()) {
    $suggestions[] = 'page_title__ior_submission';
  }
  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ior_awards_preprocess_page_title(array &$variables) {
  if ($submission = _get_submission_from_route()) {
    $view_builder = Drupal::entityTypeManager()->getViewBuilder('ior_award');
    $variables['awards'] = array_map(function (\Drupal\ior_awards\Entity\AwardInterface $award) use ($view_builder) {
      return $view_builder->view($award, 'default');
    }, $submission->get('field_awards')->referencedEntities());
  }
}

/**
 * Load a submission entity from the current route.
 *
 * @return \Drupal\ior\Entity\SubmissionInterface|false
 *   A submission entity. False if the current route does not contain a
 *   parameter that resolves to a submission entity.
 */
function _get_submission_from_route() {
  $route_match = Drupal::routeMatch();
  if ($route_match->getRouteName() !== 'entity.ior_submission.canonical') {
    return FALSE;
  }

  /** @var \Drupal\ior\Entity\SubmissionInterface $submission */
  if ($submission = $route_match->getParameter('ior_submission')) {
    return $submission;
  }
  return FALSE;
}

/**
 * Implements hook_entity_type_alter().
 */
function ior_awards_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $ior_submission_type */
  $ior_submission_type = $entity_types['ior_submission'];

  $ior_submission_type->setFormClass(
    'collections', \Drupal\Core\Entity\ContentEntityForm::class);
  $ior_submission_type->setLinkTemplate(
    'collections-form', '/researchcommons/ior/contests/{contest}/submissions/{ior_submission}/edit/collections');
}
