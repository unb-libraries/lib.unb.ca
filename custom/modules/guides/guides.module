<?php

/**
 * @file
 * Contains guides.module.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;
use Drupal\editor\Entity\Editor;
use Drupal\views\ViewExecutable;
use PicoFeed\Reader\Reader;

/**
 * Implements hook_preprocess_HOOK().
 */
function guides_menu_local_tasks_alter(&$data, $route_name, \Drupal\Core\Cache\RefinableCacheableDependencyInterface &$cacheability) {
  // Tabs to add corresponding FA icon prefix.
  $tabs_add_icons = [
    'guides.user.stats' => 'fas fa-chart-line',
  ];
  // Tabs to disable.
  $tabs_disable = [
    'entity.user.canonical' => TRUE,
    'entity.user.contact_form' => TRUE,
  ];
  // Tabs to relabel using corresponding title.
  $tabs_rename = [
    'entity.user.edit_form' => t('Edit Directory Info'),
    'profile.user_page:public' => t('Edit Public Profile'),
  ];
  // Tabs to adjust order.
  $tabs_weight = [
    'guides.user.stats' => 15,
    'entity.webform_submission.user' => 20,
  ];

  if (isset($data['tabs'][0])) {
    foreach ($data['tabs'][0] as $tab_key => $value) {
      if (isset($tabs_rename[$tab_key])) {
        // Rename the tab using the new & improved label.
        $data['tabs'][0][$tab_key]['#link']['title'] = $tabs_rename[$tab_key];
      } elseif (isset($tabs_disable[$tab_key])) {
        // Purge the undesirable tab.
        unset($data['tabs'][0][$tab_key]);
      }

      // Adjust tab order.
      if (isset($tabs_weight[$tab_key])) {
        $data['tabs'][0][$tab_key]['#weight'] = $tabs_weight[$tab_key];
      }

      // Add Font Awesome icon title prefix.
      if (isset($tabs_add_icons[$tab_key])) {
        $current_title = $data['tabs'][0][$tab_key]['#link']['title'];
        $icon_prefix = '<span class="' . $tabs_add_icons[$tab_key] . '"></span> ';
        // Borrowed from guides.lib stats.
        $data['tabs'][0][$tab_key]['#link']['title'] = [
          '#markup' => $icon_prefix . $current_title,
        ];
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function guides_views_pre_render(ViewExecutable $view) {
  if (isset($view)) {
    if ($view->storage->id() == 'research_guides') {
      $view->element['#attached']['library'][] = 'guides/guides-view-all';
    } elseif ($view->storage->id() == 'connect_with_a_librarian') {
      $view->element['#attached']['library'][] = 'guides/guides-connect';
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function guides_page_attachments(&$variables) {
  $variables['#attached']['library'][] = 'guides/guides';
}

/**
 * Implements hook_theme().
 */
function guides_theme($existing, $type, $theme, $path) {
  return [
    'categories' => [
      'variables' => [
        'categories' => NULL,
      ],
    ],
    'ckeditor-wc-search' => [
      'variables' => [],
    ],
    'ckeditor-eresources' => [
      'variables' => [
        'resources' => NULL,
        'options' => NULL,
      ],
    ],
    'guide_category' => [
      'render element' => 'elements',
    ],
    'guide' => [
      'render element' => 'elements',
    ],
    'guides_stats' => [
      'variables' => [
        'object_type' => NULL,
        'stats' => NULL,
        'form' => NULL,
      ],
    ],
    'page_title__guide' => [
    ],
    'views_exposed_form__research_guides' => [
      'render element' => 'form',
    ],
    // Override Barrio's Views Grid template for research_guides View.
    'views_view_grid__research_guides' => [
      'template' => 'views-view-grid--research_guides',
      'base hook' => 'view',
    ],
  ];
}

/**
 * Prepares variables for guide template.
 *
 * Default template: guide.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_guide(array &$variables) {
  $variables['guide'] = $variables['elements']['#guide'];
}

/**
 * Prepares variables for guide category template.
 *
 * Default template: guide-category.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_guide_category(array &$variables) {
  $variables['guide_category'] = $variables['elements']['#guide_category'];
}

/**
 * Implements hook_preprocess_field_multiple_value_form().
 *
 * Set custom "add more X" button values.
 */
function guides_preprocess_field_multiple_value_form(&$variables) {
  $values = [
    'related_guide_categories_add_more' => 'Add Another Category',
    'contacts_add_more' => 'Add Another Contact',
  ];

  if (isset($variables['element']['add_more']['#name'])) {
    $name = $variables['element']['add_more']['#name'];
    if (isset($values[$name])) {
      $variables['button']['#value'] = t($values[$name]);
    }
  }
}

/**
 * Implements hook_FORM_alter().
 */
function guides_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Apply Node edit protection functionality to guide-related forms.
  switch ($form_id) {
    case 'guide_category_form':
    case 'guide_form':
    case 'profile_public_edit_form':
      $form['#attributes']['class'][] = 'node-form';
      $form['#attached']['library'][] = 'node_edit_protection/node_edit_protection';
      break;
    default:
      // Only add unsaved change protection to whitelisted Guides-related forms.
  }
}
/**
 * Implements hook_form_FORM_ID_alter().
 */
function guides_form_guide_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $entity = $form_state->getFormObject()->getEntity();
  if ($entity->isNew()) {
    $user = User::load(\Drupal::currentUser()->id());
    $form['editors']['widget'][0]['subform']['field_user']['widget'][0]['target_id']['#default_value'] = $user;
  }
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function guides_ckeditor_css_alter(array &$css, Editor $editor) {
  $css[] = drupal_get_path('module', 'guides') . '/css/ckeditor.css';
}

/**
 * Implements hook_preprocess_page_title().
 */
function guides_preprocess_page_title(&$variables) {
  $route = \Drupal::routeMatch();
  switch ($route->getRouteName()) {
    case 'entity.guide_category.canonical':
      $variables['title'] .= ' Guides';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function guides_preprocess_page_title__guide(&$variables) {
  $variables['title'] .= ' Guide';
  $variables['askusStatus'] = _unb_libraries_askus_check_presence();
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function guides_theme_suggestions_page_title_alter(array &$suggestions, array $variables) {
  $route = \Drupal::routeMatch();
  switch ($route->getRouteName()) {
    case 'entity.guide.canonical':
      $suggestions[] = 'page_title__guide';
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function guides_editor_js_settings_alter(array &$settings) {
  foreach ($settings['editor']['formats'] as $name => $value) {
    $settings['editor']['formats'][$name]['editorSettings']['autoParagraph'] = FALSE;
  }
}
